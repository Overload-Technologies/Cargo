#shader vertex
#version 430 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Common/Utils.ovfxh"

layout (location = 0) in vec3 geo_Pos;
layout (location = 1) in vec2 geo_TexCoords;
layout (location = 2) in vec3 geo_Normal;
layout (location = 3) in vec3 geo_Tangent;
layout (location = 4) in vec3 geo_Bitangent;

out VS_OUT
{
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
    mat3 TBN;
    flat vec3 TangentViewPos;
    vec3 TangentFragPos;
} vs_out;

void main()
{
    vs_out.FragPos = vec3(ubo_Model * vec4(geo_Pos, 1.0));
    vs_out.TexCoords = geo_TexCoords;
    vs_out.Normal = normalize(mat3(transpose(inverse(ubo_Model))) * geo_Normal);
    vs_out.TBN = ConstructTBN(ubo_Model, geo_Normal, geo_Tangent, geo_Bitangent);
    vs_out.TangentViewPos = transpose(vs_out.TBN) * ubo_ViewPos;
    vs_out.TangentFragPos = transpose(vs_out.TBN) * vs_out.FragPos;

    gl_Position = ubo_Projection * ubo_View * vec4(vs_out.FragPos, 1.0);
}

#shader fragment
#version 430 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Lighting/PBR.ovfxh"

in VS_OUT
{
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
    mat3 TBN;
    flat vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

uniform sampler2D u_AlbedoMap;
uniform sampler2D u_SpecularMap;
uniform sampler2D u_GlossinessMap;
uniform sampler2D u_AmbientOcclusionMap;
uniform sampler2D u_NormalMap;
uniform vec4 u_Albedo = vec4(1.0);
uniform vec2 u_TextureTiling = vec2(1.0, 1.0);
uniform vec2 u_TextureOffset = vec2(0.0, 0.0);
uniform bool u_EnableNormalMapping = false;
uniform float u_HeightScale = 0.0;
uniform float u_Specular = 1.0;
uniform float u_Glossiness = 1.0;
uniform sampler2D u_HeightMap;
uniform sampler2D u_MaskMap;

uniform sampler2D _ShadowMap;
uniform mat4 _LightSpaceMatrix;

out vec4 FRAGMENT_COLOR;

vec4 ComputePBRLightingGlossSpec(vec2 texCoords, vec3 normal, vec3 viewPos, vec3 fragPos, vec4 inAlbedo, float inSpecular, float inGlossiness, sampler2D albedoMap, sampler2D specularMap, sampler2D glossinessMap, sampler2D aoMap, sampler2D shadowMap, mat4 lightSpaceMatrix)
{
    vec4 albedoRGBA = texture(albedoMap, texCoords) * inAlbedo;
    vec3 albedo = pow(albedoRGBA.rgb, vec3(2.2));
    float metallic = 1.0 - texture(specularMap, texCoords).r * inSpecular;
    float roughness = 1.0 - texture(glossinessMap, texCoords).r * inGlossiness;
    float ao = texture(aoMap, texCoords).r;
    
    vec3 N = normalize(normal);
    vec3 V = normalize(viewPos - fragPos);

    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);
	           
    // reflectance equation
    vec3 Lo = vec3(0.0);
    vec3 ambientSum = vec3(0.0);

    for (int i = 0; i < ssbo_Lights.length(); ++i) 
    {
        const mat4 light = ssbo_Lights[i];
        const int lightType = int(light[3][0]);

        if (lightType == 3)
        {
            ambientSum += ComputeAmbientBoxLight(light, fragPos);
        }
        else if (lightType == 4)
        {
            ambientSum += ComputeAmbientSphereLight(light, fragPos);
        }
        else
        {
            // calculate per-light radiance
            vec3 L = lightType == 1 ? -light[1].rgb : normalize(light[0].rgb - fragPos);
            vec3 H = normalize(V + L);
            float distance = length(light[0].rgb - fragPos);
            float lightCoeff = 0.0;

            switch(int(light[3][0]))
            {
                case 0:
                    lightCoeff = LuminosityFromAttenuation(light, fragPos) * light[3][3];
                    break;

                case 1:
                    lightCoeff = light[3][3];

                    if (light[2][1] > 0.0f)
                    {
                        const vec3 lightDir = light[1].rgb;
                        vec4 fragPosLightSpace = lightSpaceMatrix * vec4(fragPos, 1.0);
                        float shadow = CalculateShadow(fragPosLightSpace, shadowMap, normal, lightDir);
                        lightCoeff *= 1.0 - shadow;
                    }
                    
                    break;

                case 2:
                    const vec3 lightForward = light[1].rgb;
                    const float cutOff = cos(radians(light[3][1]));
                    const float outerCutOff = cos(radians(light[3][1] + light[3][2]));

                    const vec3 lightDirection = normalize(light[0].rgb - fragPos);
                    const float luminosity = LuminosityFromAttenuation(light, fragPos);

                    /* Calculate the spot intensity */
                    const float theta = dot(lightDirection, normalize(-lightForward)); 
                    const float epsilon = cutOff - outerCutOff;
                    const float spotIntensity = clamp((theta - outerCutOff) / epsilon, 0.0, 1.0);

                    lightCoeff = luminosity * spotIntensity * light[3][3];
                    break;
            }

            vec3 radiance = UnPack(light[2][0]) * lightCoeff;        
            
            // cook-torrance brdf
            float NDF = DistributionGGX(N, H, roughness);        
            float G = GeometrySmith(N, V, L, roughness);      
            vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);       
            
            vec3 kS = F;
            vec3 kD = vec3(1.0) - kS;
            kD *= 1.0 - metallic;	  
            
            vec3 numerator = NDF * G * F;
            float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
            vec3 specular = numerator / max(denominator, 0.001);  
                
            // add to outgoing radiance Lo
            float NdotL = max(dot(N, L), 0.0);                
            Lo += (kD * albedo / PI + specular) * radiance * NdotL; 
        }
    }

    vec3 ambient = ambientSum * albedo * ao;
    vec3 color = ambient + Lo;
	
    return vec4(color, albedoRGBA.a);
}

void main()
{
    vec2 texCoords = TileAndOffsetTexCoords(fs_in.TexCoords, u_TextureTiling, u_TextureOffset);
    texCoords = ApplyParallaxMapping(texCoords, u_HeightMap, fs_in.TangentViewPos, fs_in.TangentFragPos, u_HeightScale);

    if (!IsMasked(u_MaskMap, texCoords))
    {
        vec3 normal = ComputeNormal(u_EnableNormalMapping, texCoords, fs_in.Normal, u_NormalMap, fs_in.TBN);
        FRAGMENT_COLOR = ComputePBRLightingGlossSpec(texCoords, normal, ubo_ViewPos, fs_in.FragPos, u_Albedo, u_Specular, u_Glossiness, u_AlbedoMap, u_SpecularMap, u_GlossinessMap, u_AmbientOcclusionMap, _ShadowMap, _LightSpaceMatrix);
    }
    else
    {
        FRAGMENT_COLOR = vec4(0.0);
    }
}
