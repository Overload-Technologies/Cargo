#shader vertex
#version 450 core

layout (location = 0) in vec3 geo_Pos;
layout (location = 1) in vec2 geo_TexCoords;
layout (location = 2) in vec3 geo_Normal;

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"

out VS_OUT
{
    vec2 TexCoords;
} vs_out;

uniform vec2 offset = vec2(0.0);
uniform vec2 scale = vec2(1.0);

void main()
{
    vs_out.TexCoords = geo_TexCoords;

    gl_Position = vec4((geo_Pos + vec3(offset / scale, 0.0)) * vec3(scale, 1.0), 1.0);
}

#shader fragment
#version 450 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"

out vec4 FRAGMENT_COLOR;

in VS_OUT
{
    vec2 TexCoords;
} fs_in;

uniform vec4        u_Diffuse = vec4(1.0, 1.0, 1.0, 1.0);
uniform sampler2D   u_DiffuseMap;
uniform vec2        u_TextureTiling = vec2(1.0, 1.0);
uniform vec2        u_TextureOffset = vec2(0.0, 0.0);
uniform float       u_BlinkFrequency = 1.0;

void main()
{
    FRAGMENT_COLOR = textureLod(u_DiffuseMap, u_TextureOffset + vec2(mod(fs_in.TexCoords.x * u_TextureTiling.x, 1), mod(fs_in.TexCoords.y * u_TextureTiling.y, 1)), 0) * u_Diffuse;
    FRAGMENT_COLOR.a *= (sin(ubo_Time * u_BlinkFrequency) + 1.0) / 2.0;
}